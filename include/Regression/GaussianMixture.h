//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : GaussianMixture library Untitled
//  @ File Name : GaussianMixture.h
//  @ Date : 2009-07-16
//  @ Author : Dominik Belter
//
//


#ifndef _GaussianMixture_H
#define _GaussianMixture_H

#include "3rdParty/tinyXML/tinyxml2.h"
#include "Regression/population.h"
#include "Regression/individual.h"
#include "Regression/regression.h"
#include "Utilities/recorder.h"
#include "Optimizer/cmaes.h"
#include <iostream>

class GaussianMixture : public regression::Regression {
public:
    /// Pointer
    typedef std::unique_ptr<GaussianMixture> Ptr;

    class Config{
      public:
        Config() {}
        Config(std::string configFilename);
        public:
            // input - number of features
            int inputsNo;

            // output - number of outputs
            int outputsNo;

            // PSO population size
            int populationSize;

            // Gaussians no
            int gaussiansNo;

            // max iterations
            int maxIterations;

            // length of the training vector
            int trainSize;

            // length of the testing vector
            int testSize;

            // output format
            int outputType;

            ///normalize output
            bool normalizeOutput;

            // boundaries for Gaussian width [min, max]
            std::vector<std::pair<double,double>> boundaries;

            // train dataset filename
            std::string trainFilename;

            // test dataset filename
            std::string testFilename;

            // verification dataset filename
            std::string verifFilename;

            // optimization method name
            std::string methodName;

            // optimizer config
            std::string optimizerConfig;

    };

	///constructor
    GaussianMixture();
    ///constructor
    GaussianMixture(GaussianMixture::Config _config);
	///destructor
    ~GaussianMixture();
    /// Initialize training
    void initializeTraining(void);
    /// Initialize training
    void initializeTraining(const std::string& trainFilename, const std::string& verifFilename, const std::string& testFilename);
    /// search for the best GaussianMixture function - PSO method
    void train();
    /// compute output for the best polynomial
    double computeOutput(const Eigen::MatrixXd& input, int outNo) const;
    /// compute gradient of trained function
    void computeGradient(const Eigen::MatrixXd& input, Eigen::MatrixXd& grad) const;
    /// store results
    void storeResult(std::string filename);
    /// store results
    void load(std::string filename);
    /// write summary
    void writeSummary(const std::string& filenameTrain, const std::string& filenameTest);

private:
    /// compute cost for the given solution
    double computeCost(const Eigen::VectorXd& x);
    /// optimize GM
    bool optimizeGM();
    /// set chromosome of the individual
    void setSolution(size_t individualNo, const Eigen::VectorXd& x);
    /// read train/test/verification data
    void readInOutData(const std::string& filename, Eigen::MatrixXd& _input, Eigen::MatrixXd& _output, int& vecLength);
    /// read train/test/verification data
//    void readInOutSingleRow(const std::string& filename, Eigen::MatrixXd& _input, Eigen::MatrixXd& _output, int& vecLength);
    /// compute Average Percent Error
    double computeAPE(const Eigen::MatrixXd& input, const Eigen::MatrixXd& output, double& avError, double& maxError);
    /// set boundaries of function's parameters -run first
    void setBoundaries();
    /// compute n boundaries (width of Gaussian function)
    void computeBoundaries(std::vector<std::pair<double,double>>& _gaussianBoundaries, const std::vector<std::pair<double,double>>& _inputDomain);
    /// sets parameters of polynomial and creates population for EA - run second
    void setParameters();
    /// read training data
    void readTrainingData(const std::string& filename);
    /// read verification data
    void readVerificationData(const std::string& filename);
    /// read test data
    void readTestData(const std::string& filename);
    /// initialize matrices
    void initializeMatrices();
    /// compute coefficients
    bool computeCoef(unsigned int individualNo, Eigen::MatrixXd& result_coef);
    /// compute individual fitness
    double computeIndividualFitness(const Eigen::MatrixXd& _input, const Eigen::MatrixXd& _output, Eigen::MatrixXd& _coef, unsigned int individualNo);
    /// save plot file (test of GaussianMixture function)
    void savePlotFile(const std::string& filename, const Eigen::MatrixXd& input, const Eigen::MatrixXd& _output, const Eigen::MatrixXd& _testInput, const Eigen::MatrixXd& _testOutput);
    /// test GaussianMixture function
    void testResults(const std::string& filename, const Eigen::MatrixXd& _input, const Eigen::MatrixXd& _output);
    /// normalize output
    double normalizeValue(double value, const std::pair<double,double>& minMax) const;
    /// denormalize output
    double denormalizeValue(double value, const std::pair<double,double>& minMax) const;

    /// config
    Config config;
    /// optimizer
    std::unique_ptr<Optimizer> optimizer;
    /// population of individuals
    Population population;
    /// boundaries for Gaussian width
    Eigen::MatrixXd gaussianBoundaries;
    /// train_data
    Eigen::MatrixXd features;
    /// output - train_data
    Eigen::MatrixXd output;
    /// verification data - input
    Eigen::MatrixXd verifInput;
    /// verification data - output
    Eigen::MatrixXd verifOutput;
    /// test data - input
    Eigen::MatrixXd testInput;
    /// test data - output
    Eigen::MatrixXd testOutput;
    /// polynomial coefficients
    Eigen::MatrixXd polyCoef;
    /// the best polynomial
    Individual bestPolynomial;
    /// actual epoch
    unsigned int currentEpoch;
    /// best fitness
    double bestFitness;
    /// best individual number
    unsigned int bestIndividual;
    /// best fitness recorder
    Recorder1D bestFitnessRecorder;
    /// average fitness recorder
    Recorder1D averageFitnessRecorder;
    /// population size recorder
    Recorder1D populationSizeRecorder;
    /// epoch recorder
    Recorder1D epochRecorder;
//    Eigen::MatrixXd sample;//point (x1,x2,x3,x4,...)
    Eigen::MatrixXd tempCoef; // temp coef
    /// input boundaries
    std::vector<std::pair<double,double>> inputDomain;
    /// output boundaries
    std::vector<std::pair<double,double>> outputDomain;
};

namespace regression {
    /// create a regression objects
    std::unique_ptr<Regression> createGaussianApproximation(void);
    /// create a regression objects
    std::unique_ptr<Regression> createGaussianApproximation(GaussianMixture::Config config);
}

#endif  //_GaussianMixture_H
